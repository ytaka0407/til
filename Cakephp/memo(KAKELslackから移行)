class Hello{ 　　　　　　　クラス名Hello
    var $name='noname'; 　　プロパティ宣言(クラス内で使う変数)
    function say(){ 　　　　ファンクション名say
        echo"<p>Hello,".$this->name."!</p>"; 　処理内容。$this->name＝このクラスのnameプロパティの値が入る。ってことね。
    }
}
$マーク入らないのめっちゃ違和感あるから早く慣れたい。

あ。そうかおなじクラス内の同じ変数何回も使うから、このインスタンスのこの変数、って書いてやらないとそもそも使い分けられないのか。
(同じこと教科書書いてある。)
$thisってなんだこれって思ったけど、その時作ってるインスタンス自身。
(これも教科書に書いてあるまんま)
不思議と説明だけ読んでもつかめないけど、とりあえず書いてみて全体眺めてうーーーーーーーん。ってなるとふっとその説明文がちゃんと読めるようになる不思議。

HelloController→Hello(=コントローラー名)フォルダに入ってるファイル(=function名)に書かれたビューテンプレートファイルを呼び出す。
index.ctpとかform.ctpとか→ビューテンプレート。コントローラーから呼び出される。
気抜くとどれが何の役割のファイルなのかすぐわからなくなる。


コンストラクタ。
クラスをインスタンス化した時に呼び出さずとも自動で実行されるメソッド。
呼び出しと同時に済ませておきたい作業(＝初期化)はここに入れておく。
コンストラクタ内で変数指定する場合、new=クラス名()のカッコ内に変数の中身を指定する必要あり。
ここで変数指定しておけば。変数に任意の値を格納するためのメソッドの呼び出しの必要がなくなるのね。

継承との関係(php公式より。一緒に読んだので)
注意: 子クラスがコンストラクタを有している場合、親クラスのコンストラクタが 暗黙の内にコールされることはありません。 親クラスのコンストラクタを実行するには、子クラスのコンストラクタの 中で parent::__construct() をコールすることが 必要です。 子クラスでコンストラクタを定義していない場合は、親クラスのコンストラクタを継承します (ただし、private 宣言されている場合は除く)。 これは、通常のクラスメソッドと同様です。

initializeアクション
同じ初期化系の処理各indexを含む全部のアクションよりも先に、コントローラーにアクセスするたびに自動で実行される。
initializeは対応するテンプレートファイルはなくてもOK。(どのスタイルシート読み込むかとかそういうの書いてる。)
indexと一瞬ごっちゃになったけど、indexはアクションの指定なしの場合にも勝手に実行される。
initializeはどのアクションを指定した時にも自動実行される。
つまり、全然別物(なぜ混乱したのか。)。

initializeアクション
同じ初期化系の処理各indexを含む全部のアクションよりも先に、コントローラーにアクセスするたびに自動で実行される。
initializeは対応するテンプレートファイルはなくてもOK。(どのスタイルシート読み込むかとかそういうの書いてる。)
indexと一瞬ごっちゃになったけど、indexはアクションの指定なしの場合にも勝手に実行される。
initializeはどのアクションを指定した時にも自動実行される。
つまり、全然別物(なぜ混乱したのか。)。
10:05
個人的にテキスト進める中でindexアクションを指定しないから、指定してないアクションは実行されないことを忘れそうになる。
