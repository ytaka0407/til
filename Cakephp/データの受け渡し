★コントローラーとビューテンプレート
一つのコントローラー＝一つのクラス(処理の系統ごとなどで分類)
一つのクラスの中にそのクラスで行えるアクションを複数記述(クラスの持つメソッド)
一つのクラスに対して、テンプレートフォルダ内にクラスに対応する同名フォルダを作成
フォルダ内にはアクションごとに対応して呼び出すテンプレートファイルを格納作成
★コントローラーとレイアウト
コントローラーに対応する形で同名でレイアウトフォルダにレイアウトファイルを作成。
initializeアクションでレイアウトを指定しておくことでどのアクションを実行したとしても同じレイアウトが適用される。 （編集済み） 

takashima-日曜午前  13:33
ここまではモデルの場合も同じみたい。
13:35
データベースとの接続回りのコントローラーは
テーブルを扱うテーブルクラス(コントローラー)と
中身のレコードを扱うエンティティクラス(コントローラー)２つセットでモデルと称する。
クラス及びコントローラーファイルの名づけルールは
テーブルコントローラー＝テーブル名そのまま。
エンティティコントローラー＝テーブル名の単数形
13:37
データベース課題の名づけの時に、テーブル名は全部複数形、リレーションのためにカラム名で使うほかテーブルの名称は単数形で。ってルールついてたのはこの辺りも関係あったのか。なるほど。

takashima-日曜午前  13:58
テーブルコントローラー側で
$data = $this->People->find('all');
$this->set('data', $data);
データベースのpeopleのデータを全部取り出して、帰ってきたクエリーを変数$dataにsetで格納してビューに引き継ぐ。
―>toArrayでデータを配列として取得。(foreachなので配列一層目として一行ずつ。)
$objに格納して$objからカラム名で指定してカラムのデータを一個ずつ取り出す形でecho。
<?php foreach ($data->toArray() as $obj) : ?>
    <tr>
        <td><?= h($obj->id) ?></td>
        <td><?= h($obj->name) ?></td>
        <td><?= h($obj->mail) ?></td>
        <td><?= h($obj->age) ?></td>
    </tr>
    <?php endforeach; ?>
やっと値の受け渡しの流れがすっと読めるようになってきた。
と思いきや二週目に見たらいろいろ違っていたので修正。  

コントローラーでデータ取得。
↓
取った値(というかクエリ)を変数でビューに引き継いでビュー側で出力。
