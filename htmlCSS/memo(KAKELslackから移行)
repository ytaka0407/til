 頻繁に出てくるタグまとめ。
・idとclassの使い分け
どっちもスタイルシートで詳細に指定するためのタグなのは同じ。

id→ページ内で1回のみ。
class→ページ内で2回以上使ってOK（別に1回でもいい）

逆に言えば記事の見出しとか複数箇所まとめて同じ指定をしたいものはclass。
idを使う場面は、逆にこの指定がページ内でこの箇所だけと強調したい場合。あとhref="#・・・"でページ内ジャンプのリンク先として設定したい場合はid。

・padding 　内枠の余白幅指定
・margin　枠外の余白幅指定
・list-style 　リスト形式の見出しの種類指定。指定時はolとulを見分ける指定をする。
・text align 右寄せ左寄せセンター等指定。
align(アライン)=揃える
・font-family 複数ブラウザ間でのフォントを揃える。優先順位の高い順にカンマで指定。どのフォントも使えない場合用に最後に大枠の種類の指定も入れておくのがベスト。
全体に効かせたいのでbodyに直接指定する。
：候補1,候補2,候補3,フォントの種類；

・normalize css 複数ブラウザ間のデフォルトのスタイルを平均化するcssファイル。cssファイル内・htmlファイル内共に、上から順位読まれていくので、指定先がダブった場合、最終的により下にある記述が優先されて効いてくる。
そのためnormalize cssへのリンクはは自分の編集してるファイルより上に配置する。

・line-height  文字の上下の余白指定。文字サイズに対して余白込で何割増しのサイズにしたいかで％で指定するのが一般的。
理由：直接指定する場合、文字サイズ含めた全体のサイズを具体的にpx数で指定することになるため、指定先に複数の文字サイズが混在している場合に均等な余白が取れない（トータルのpx数が固定なので大きいフォントの文字の余白が狭くなる。）

・small　タグだけでとりあえず周りより一回りフォントが小さくなる。でも別途サイズ指定するのが推奨っぽい。

・divタグの意味　グループとしてブロックレベル要素として扱うためのタグ。それ自体に全体の中での見出し、記事など校正面での意味はない。div内外のものは別のブロックになるので、自動的に改行される。テキストだと文章そのものの装飾ではなくて全体の配置等の指定にはあえてdivタグ使っているみたい。（5-2-1ページ中央揃えなんかは囲む範囲がbodyタグと全く同じ。）
改行しない、ブロックレベル要素として独立させたくない時はspanタグ。文章中一部のフォントを変える等の目的の場合はこっち。

・box-sizing　ボックスの内側にどの要素まで含めるか指定。デフォルトはcontent-box=内容のみをボックスとする。他に指定できるのはborder-boxのみ。罫線もボックスに含めることで罫線の幅を全体幅の計算中に考えなくてよくなる。
テキストでは、全体の幅を固定、その中の子要素の幅を指定して要素と要素の間に罫線を引いた時に幅の調整に使用。

・floatとclear　セット。floatは指定したボックス要素に対して、そのボックス要素が所属するボックス内で左右の配置を決める。
ボックスXのなかにA・B・C・Dが順にあった場合、Aにfloat:leftをかけると動きとしてAがX内で左、何もしなければB-D全部右に行く。
何か要素を左に配置するのには右に行く要素もないといけない。（当たり前だけど）→とりあえず全部右いっとけ。的な感じ？
えーでもなんでfloatさせた要素の入ったボックスの外の要素まで回り込むのか。。なんかもやる。
とりあえず、右に配置したいものにはfloat:rightをかけて、それに対して左にしたいも・inheritキーワード　=親要素に準ずる。
テキストではcolorプロパティで出てきてるけど、何のプロパティでも使えるらしい。
罫線の細かい指定とかいちいち同じこと書かなくても、親要素を継承したければinheritだけでOK。
調べたところ、そもそもプロパティの中に親要素から子要素に継承される継承プロパティと非継承プロパティがあるらしい。
調べたサイトでは継承プロパティの一般例にcolor、非継承プロパティの一般例にborderが挙がっていた。
colorが継承されるのはわかるけど、borderの継承されないというのがよくわからなかったので色々試してみたところ

■html
<p class="test">この段落には<em>強調されたテキスト</em>があります。</p>
■css
.test {
    border: medium solid;
    padding:30px;
}
としてみると全体が大きくフレームで囲まれた。(pタグにしかborderがかかってない)
試しに
css
.test em{
    border:inherit;
}
を書き加えてみると、フレームの中にemタグの部分が二重にフレームで囲まれた表示になった。
確かにborderがデフォルトで継承されたら困ることがわかった。。
inheritを加えると、非継承プロパティの指定も引き継げることになる。 
ちなみに継承プロパティも非継承(初期値になる)にしたい場合はinitial。使う場面いまいち思いつかないけど。。

href="#・・・"で指定のページ内のidに飛べる。トップに戻る。等。
戻り先指定で混乱しないように、戻す先としてリンク貼る場合はid属性推奨。のはfloat:left、左右配置の下に続けたい要素に対してclear:bothをかけることはわかった。
試してみたところ、後続要素の1つにclear:bothかけたらD要素もそのまま回り込まずに行けたので、途中で一個かけたら以降全部回り込まなくなるらしい。

・clearfix 　難しいー。テキストの122Pの赤枠が上に固まってるのは、pagebody内の要素が全部floatしちゃってボックスの高さがなくなってるからっぽい（検証でheightも0になってた。）
height0のボックスからfloatした要素2つが浮いてボックスの高さ以上の高さを取ってるから、marginも効いてない。。のかな。。（自信ない）
色付けしたりして試しつつじっくり読んだので自分の言葉でメモ。
フローティングボックスは親要素のフレームのサイズ決めに関与できない。（名前の通りフレームから浮いてる感じ）でもボックス内で重なって表示とかにはならない。
そこに、floatしたボックスの親要素（今回はpagebody）の:afterでcontentを一個作り、なおかつそれをボックス指定することで、親要素の中の最後に一個ボックスができる。
で、それめがけて回り込み防止することでその最後尾ボックスが親要素内でfloatされずに一番下に固定される。
今まで高さ確保していた要素がfloatで逃げて高さ０になってたのがfloat部分より下に最後尾ボックスが来ることで、
親ボックスの大きさが最後尾ボックスの位置まで認識されるようになって、ちゃんと全要素囲んだフレームになる。
みたいなイメージ。  

ブロックレベル要素とインライン要素の違い
ブロックレベル→はじめから大きい箱。ボックスのサイズは親要素の幅いっぱい。はじめから幅とか高さとか調整できる。
ボックスが幅いっぱいだから、連続して使うと自動的にボックスサイズに合わせて改行される。
インライン要素→要素中の文字のサイズに合わせたボックス。幅とか高さとかは指定できない。文章中に入れても改行等はされないで色付けしたりできる。paddingは設定OK。でも下の要素とボックスがダブってpaddingもダブる。
左右marginを設定すると多分囲った部分と前後の文章の間に隙間があくはず(試してはない。)上下marginは設定不可。
インラインタグをブロックレベルにするのはdisplay:block
ブロックレベルタグをインラインタグにするのはdisplay:inline(中身の幅を合算してサイズオーバーしなければ横並びになる。)
ブロックレベルのdivタグに対してインラインのspanタグ

vertical-align:bottom で画像の下の隙間が消える理由。1周目よくわかんなくて飛ばしたやつ。やっと噛み砕いて理解できたのでまとめ。
vertical-alignを指定する前。同じ要素の前後に文字があってもなくても、フォントとline-heightに合わせてベースラインという基準がが下からちょっと上がったところに設定されてて、デフォルトだとそこに画像の最下部を合わせることになっている。だからその状態で画像を表示すると、画像の最下部がそのベースラインに配置され、ベースライン下に隙間が発生してしまう。これが問題になる画像下の隙間。
で、画像最下部を下に隙間のないボトムラインに配置するのを基準にすると、まず下の隙間がなくなる。
ちなみに1周目の時はボックス要素のサイズの変化のルールが曖昧で、なんで画像が下に下がる動きしただけで上下の隙間がなくなるのかわからなくて混乱していた。
色々調べた結果、chromeの検証で見るとこの画像の要素にも一応フォントが設定されてて(デフォルトかnormalizeで指定？)16pxになっている。当然画像の方が16px+line-heightよりも上下幅は大きいので、bottomに合わせれば画像のほうが頭が飛び出てボックスはそれに合わせたサイズになるし、(ちょっとやってみたら)この場合topに合わせたとしてもline-heightのbottomよりも画像の底位置のほうが飛び出るのでこれを囲むボックスのサイズは画像に合わせたサイズになるから同じように隙間は埋まる。
ベースライン揃えにした時のみ、ベースライン下に絶対に余白を取るから隙間ができるみたい。
テキストの解説は文字サイズより画像の方が小さいから揃え位置のイメージは湧きやすいけど、実際の適用が若干見え方が違っていて1周目では理解が追いつかなかった。

表関係のタグ
　　　担当　　　商品　　価格　　数量　  合計
1/10　田中　　りんご　　120　　　2　　240
1/10　佐藤　　みかん　　100　　　3　　300
1/20　鈴木　　ぶどう　　150　　　1　　150
総計　　　　　　　　　　　　　　　　　  690
【表全体の中のタグ】
thead　表の一番上の大見出し行を指定。なくてもいい。
この子要素は全部見出しになるのでthのみ。上で言う”担当””商品””価格””合計”。
tbody　表の中身。明細の入る行
tfoot　表の一番下のまとめ的な行。なくてもいい。
上で言う総計・690
【明細単位の指定】
tr:　table rowの略。　テーブルの行を指定するタグ。tr の中に見出しタグthとデータタグtdが入る。
th:　table headerの略。 テーブルの見出しのタグ。上で言うと日付
td:　table dataの略。 テーブルのデータのタグ。上で言うと田中とかみかんとか金額とか明細。

bxsliderのバージョンが違ってテキストとフォルダ名も何も一致しないから公式サイトとググりで何とかクリアー。
最後の最後で引っかかったのはテキスト通りにclass名bxsliderにしてたのが、新しいやつだとただのslider指定になってたためでした。。これ結構重要じゃないのかね。。
困った時は公式サイトの説明をじっくり読もう。
あと今回落としたのがbxslider4-4.2-12だったんだけど、中身のフォルダがdist　docs_src　srcとテキストと全然違うフォルダ名、かつ全フォルダに同じjsとcssのシートがある状態だった。
この名前のつけ方は慣用的な部分が強いようで
dist　distribution 配布物
src　source　ソースコード
docs　document ドキュメント
らしい。どこかのブロガーさんが色々まとめてくれていた。

久しぶりにHTMLタグについてメモ
dl・dt・dd
何かを定義したい時に使う。
dl（=definition list= 定義リスト）を枠として
dt（=definition term=定義する単語）が定義したいテーマとか用語
dd（=Definition Description=定義の説明）がその説明・定義内容とする。
<dl>
<dt>私の尊敬する人（の定義を下記に示す）<dt>
<dd>福沢諭吉</dd>
</dl>
みたいな感じ。多分。
この、定義。っていうのが、ddを書く人が決めてね！っていう意味でフォームのお題にdt、入力部分にddとして使ってると解釈。 
