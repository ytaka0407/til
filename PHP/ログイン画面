ログイン画面前半
会員登録の時とほぼ同じパターン。
まず$_POSTが中身存在するかどうかのif文経由した後、エラー判定のメインは未入力かどうかのif判定の中にデータベースと合致するかのif判定が入れ子になっている。
エラー判定は
①!empty($_POST→$_POSTの中身が空じゃなければ次のログイン処理に進む。
そうでなければhtmlの入力画面表示まで飛ぶ。
※入力が空かどうかではない。未入力でもログインボタンを押された後の2周め以降の処理なら、ここは配列要素が入ってempty扱いにはならない。
アクセスした初回表示のときのみここでfalseになる。
②$_POST['email'] != '' && $_POST['password'] != ''→$_POST['email'] が空じゃない。なおかつ、$_POST['password'] != ''も空欄じゃなければログイン処理を進める。
そうでなければ$error['login'] にエラー内容をhtmlに引き継ぐ'blank'をつけてhtml入力画面表示に飛ぶ。
ここまでのifがTRUEならデータベースの中身と照合する。
select文での照合結果をfetchしたものを$memberに格納。
ｰ>fetch()は、該当するデータが1行も無くて取得に失敗した場合はFALSEを返す。(このあとの判定で使う。)
③if ($member)｛......
つまり、if $member=TRUE{......と同義。
この場合のTRUEは、$member(=fetchの取得内容)値が何かしら入ってれば全部TRUE。FALSEの場合=SELECT文で該当するものがなかったということなのでログイン失敗エラー。 

ログイン情報の記録(COOKIE保存・呼び出し)
★呼び出し側ログインプログラムのデータベース接続してセッションスタートの直後に、COOKIE記憶情報があるかどうかを判定する。
if($_COOKIE['email']!='')｛........
$_COOKIE［’email’］があれば、中の要素の［'email'］と［’password’］を$_POSTに格納。
$_POST［’save’］に=’on’を格納。（後で記憶したり記憶し直して記憶期間更新するのに使う。）
★COOKIE記憶側
記憶するタイミングはログイン成功した直後。
$_POST［’save’］にonが入っている時。
setcookie('email' , $_POST['email'],time()+60*60*24*14)で、$_COOKIEの要素としてのキー［’email’］に$_POSTに［’email’］を格納。期間はtime()+60*60*24*14で、現在時刻から2週間。
パスワードも同様。
既にCOOKIE記憶がされていたとしても、ここでもう一回値を入れ直すことで、time()time()+60*60*24*14が毎回そのログイン時から２週間にに更新される。
$_POST［’save’］=’on’について
COOKIE記憶がない状態でログイン画面に入った場合は、html前の処理は何もされずにhtml画面表示→チェックボックスを入れることで$_POST［’save’］に値が入る。
しかし、COOKIE記憶がある状態でこの画面に入ると、当然htmlの表示やログインボタンを押すチャンスがないため
$_COOKIE記憶からログイン処理を行う分岐のところで$_POST［’save’］に意図的に’on’を入れてあげないといけない。
ここで入れないと初回のチェックボックスチェック時以降$_POST［’on’］が判定文になっているログイン情報記録の処理がされず、2週間たったらログイン情報が消えてしまう。
