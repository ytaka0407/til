タイムスタンプ→起点からカウントした秒数
dateファンクション→タイムスタンプ(無指定なら現時刻のタイムスタンプ)を指定のstringフォーマットに変換して出力。逆に意図した時刻を表示したいなら元ネタのタイムスタンプの指定が必要。
strtotimeファンクション→任意の変数や日付をタイムスタンプ形式に変換する。string to timeの略。
任意の時刻を表示させたいなら、dateファンクション内にstrtotimeファンクションを入れ子に。

今日を起点として１日後(翌日)から１年後までの日付を表示。
for($i=1;$i<=365;$i++){ 
$iをから365以下の間だけ値を+1ずつ増やしながら繰り返し。
    $day=date('n/j(D)',strtotime('+'.$i.'day'));
date(引数①表示形式の指定,引数②指定したい時間のタイムスタンプ)
タイムスタンプを決めるためにstrtotimeを使う。
strtotimeでphp指定書式で表示した日付や時間を引数に指定するとタイムスタンプに変換してくれる。変数とか組合わさっててもOK。
+.$i.'day'→+◯◯day→現時点から◯◯日後

strtotime ( string $datetime [, int $now = time() ] ) : int
この関数は英語の書式での日付を含む文字列が指定されることを期待しており、 now で与えられたその形式から Unix タイムスタンプ (1970 年 1 月 1 日 00:00:00 UTC からの経過秒数) への変換を試みます。 now が指定されていない場合は現在日時に変換します。
公式に２つ目の引数使ってる例が一個もないんだけど。２つ目の引数指定していないと現在日時になるのはわかった。
２つ目の引数をもし１週間前の日付にして、１つ目の引数を+1dayにすると、１週間前基準の+１日になるのか
→試したらなった。
ちなみにstrtotime("+1day");も、strtotime("1day");も同じように表記された。
→strtotime()は絶対値(何月何日)
もしくは、現在の日時基準か２つ目の引数で指定した日時基準での相対的な日時(翌日、とか１週間後とか。)を変換することができる。
ちなみに2つ目の引数に1週間前(time()-(7*24*60*60))を指定した上で、1つ目の引数を絶対的な書式で1987/04/07を指定してみたら、1週間前基準は無視されました。
(ちなみに自分の誕生日。。)
strtotime("1987/04/07",time()-(7*24*60*60))
(strtotime("1987/04/07"))
は、同じ値。
が！
strtotime("+1987/04/07",time()-(7*24*60*60))
は、第一引数が相対値として認められたらしく、1987/04/07のタイムスタンプ分足された数値が返ってきた。
かなり無理矢理でも+-つければ相対値として計算してくれるのね。
ちょっと相対値絶対値の動きが気になったので寄り道実験でした。。
strtotime確かに賢い。というかサポートされてる日付と時刻の書式のバリエーションがかなり豊富。
